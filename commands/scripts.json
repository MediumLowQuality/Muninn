[
	{
		"name": "run",
		"level": 0,
		"body": "if(args.length > 0) eval(args[0]);",
		"help": "Calls `eval` on the args following `$run`. There is a reason you do not have access to this."
	},
	{
		"name": "who",
		"body": "const origChannel = msg.channel;origChannel.send(`This is ${process.env.WHO}'s instance of Muninn.`)",
		"help": "Check whose instance of Muninn is running."
	},
	{
		"name": "ban",
		"level": 2,
		"body": "const origChannel = msg.channel; msg.mentions.members.map(user => user.ban().then(user => origChannel.send(`${user.tag} banned.`)).catch(process.log));",
		"help": "Bans the mentioned user."
	},
	{
		"name": "kick",
		"level": 2,
		"body": "const origChannel = msg.channel; msg.mentions.members.map(user => user.kick().then(member => msg.channel.send(`Kicked ${msg.member.displayName}.`)).catch(process.log))",
		"help": "Kicks the mentioned user."
	},
	{
		"name": "userchannel",
		"level": 2,
		"body": "const server=msg.guild;const origChannel=msg.channel;let name=args[0];let userOwner=msg.mentions.users.first();let category=args.length>=2?server.channels.cache.filter(chan=>chan.type==='category').find(chan=>chan.name.toLowerCase()===args[1].toLowerCase()):undefined;let channelOptions ={type:'text'};if(userOwner) channelOptions.permissionOverwrites=[{id:userOwner.id,allow:['MANAGE_CHANNELS','MANAGE_MESSAGES','MANAGE_ROLES']}];if(category) channelOptions.parent=category;let newChannel=server.channels.create(name,channelOptions).then(channel=>origChannel.send(`${channel} created.`));",		"help": "Creates a new channel, and optionally moves it to a category and gives a mentioned user moderation permissions in that channel. Syntax is `$userChannel <name> [<name of category>] [@user]`."
	},
	{
		"name": "resetservername",
		"level": 3,
		"body": "const server = msg.guild; let defaultName = settings.defaultName; if (defaultName) server.setName(defaultName[0]).then(() => msg.channel.send(`Changed server name to ${defaultName}.`)).catch(e => process.log(e));",
		"help": "If the server has a default name defined in its settings, the server name is reverted to that. Otherwise, does nothing."
	},
	{
		"name": "colorme",
		"level": -1,
		"body": "if(args.length === 0) return msg.reply('You need to include a color.'); let color = args[0].replace('#', '').toUpperCase(); try{color = parseInt(color, 16);} catch (e) {return msg.reply('Your color does not resolve. Try a hex color code.')} let member = msg.member, server = msg.guild, name = member.displayName, position = member.roles.highest.position + 1; let roles = server.roles.cache; let role = roles.find(role => role.name === name); if(role === null){server.roles.create({name, permissions: 0, color, hoist: false, mentionable: false, position}).then(role => member.roles.add(role));} else {role.setColor(color);}",
		"help": "Creates a role named after the user with no extra permissions, with the specified color. If such a role exists, recolors it."
	}
]